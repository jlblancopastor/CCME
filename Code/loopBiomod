#### BIOMOD LOOP FOR EVERY SPECIES IN THE DATASET ####
#### 0. PREPARATORY PROCEDURES ####

packages<-c("raster", "biomod2", "dismo","mgcv","rasterVis","RColorBrewer","rgdal","mgcv","shapefiles","rgeos","sp","maptools", "maps")
lapply(packages, require, character.only=T)
geoproj<-"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
species.list<.list.files(pattern="\\.shp$") #a list containing the names of the species written exactly as in the qgis folder where all shapefiles are stored

presence.absence.raster <- function (mask.raster,species.data,raster.label="") {
mask.raster[!is.na(mask.raster)] <- 0
speciesRaster <- rasterize(species.data,mask.raster,field=1)
speciesRaster <- merge(speciesRaster,mask.raster)
names(speciesRaster) <- raster.label
return(speciesRaster)
}
#### 1. BIOMOD PARAMETERS ####
#this is set up, for now, in a separate branch
#### 2. LOOP ###
setwd("") # where the shapefiles are. Currently for this is in "F:/Climatechange/Qgis"
species.list<-list.files(pattern="\\.shp$")
gsub(".pdf",replacement="",list)
for (s in species.list) {
  
  shape.species<-readShapePoints(s,proj4string = CRS(geoproj)) #creates a shapefile of points for the sth species
  shape.mountain<-readShapePoly("mountains",proj4string = CRS(geoproj)) #reads the global mountain polygon shapefile
  select.mountain<-over(shape.species,shape.mountain)  #overlays species ocurrences with species distribution 
  select.mountain<-as.data.frame(droplevels(select.mountain$Name)) #erase non-used levels
  names.mountain<-levels(select.mountain[,1]) #selects the names of the mountain ranges
  #### 2.1 #### MODELING FOR PRESENT
  #Bioclimate variables are downloaded
  setwd().. #where the bioclimate variables for CHELSA are (only the selected).
  unzip(dir())
  # mask(crop(raster("CHELSA_tmax_3_1979-2013_land.tif",crs=geoproj),selected.shape.mountain),selected.shape.mountain) crop each variable with select.mountain object
  predictors<-stack(....) ### to stack the predictors.
  
        #2.1.1 Calibration dataset
        
        species.coords<-coords(s)
        species<-s
        species.map<-as.data.frame(presence.absence.raster(bio01,species.coords,raster.label=species),xy=TRUE) # check if bio01 is one of the biovars to use as mask
        species.na<-species.map[,3]
        species.na[species.na==0]="NA"
        species.na<-cbind(species[,1:2],species.na)
        colnames(species.na)<-c("x","y",s)
        
      myRespName <- s
# the presence/absences data for our species
myResp <- as.numeric(species.na[,myRespName])
myResp[myResp == 2]  <- "NA"
myResp<-as.numeric(myResp)
# the XY coordinates of species data
myRespXY <- species.na[,c("x","y")]


        data<-BIOMOD_FormatingData(resp.var=myResp,
                            expl.var=predictors,
                            resp.xy = myRespXY,
                            resp.name = myRespName,
                            eval.resp.var = NULL,
                            eval.expl.var = NULL,
                            eval.resp.xy = NULL,
                            PA.nb.rep = 5,
                            PA.nb.absences = nrow(species.coords)*6, #this is the minimal number which is optimal for me
                            PA.strategy = 'random',
                            na.rm = TRUE)
        # rasters or any supported format by the raster package)
        rm() #remove the predictors used here

#### 5.2 MODELING ####
models <- BIOMOD_Modeling(
  data,
  models = c('GBM','RF',"GLM","GAM","MARS","ANN"), #GAM is going to be trickier for species with a scarce number of points
  #models.options = myBiomodOption, #check the script which has been set aside in github
  NbRunEval=5,
  DataSplit=90,
  VarImport=1,
  prevalence=0.5,
  models.eval.meth = c("ROC",'TSS'),
  SaveObj = FALSE,
  rescal.all.models = FALSE,
  do.full.models = FALSE,
  modeling.id = paste(myRespName,"FirstModeling",sep=""))

  rm(data)

proj.models<-BIOMOD_Projection(models,
              new.env=predictors,
              proj.name=s,
              xy.new.env = NULL,
              selected.models = 'all',
              binary.meth = "TSS",
              filtered.meth = "TSS","ROC",
              compress = TRUE,
              build.clamping.mask = FALSE)

rm(predictors)

models.ensemble.mean.weight<- BIOMOD_EnsembleModeling( models,
                                            chosen.models = 'all',
                                            em.by = 'all',
                                            eval.metric = 'all',
                                            eval.metric.quality.threshold = c(0.8,0.8),
                                            models.eval.meth = c("ROC",'TSS'),
                                            prob.mean = FALSE,
                                            prob.cv = FALSE,
                                            prob.ci = FALSE,
                                            prob.ci.alpha = 0.05,
                                            prob.median = FALSE,
                                            committee.averaging = FALSE,
                                            prob.mean.weight = TRUE,
                                            prob.mean.weight.decay = 'proportional',
                                             VarImport = 1)
ensemble.pres.mean.weight<-BIOMOD_EnsembleForecasting( models.ensemble.mean.weight,
                                           projection.output = proj.models,
                                           selected.models = 'all',
                                           binary.meth = "TSS",
                                           filtered.meth = c("ROC",'TSS'),
                                           total.consensus=TRUE,
                                           compress = TRUE)
prediction.present<-paste("ensemble.pres@proj@val$",s,"_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData) #check if this works
writeRaster(prediction.present,paste(s,".pres.asc",sep="")) ###threshold techniques to define

  #### 2.2 #### FUTURE MODELING
  models<-c("csiro","miroc")
  rcps<-c(26,60,85)
  years<-c(30,50,80)
  for (m in models){
  for (rcps){
  for (y in years){
  #### 2.2 For each climate scenario, begin reading shapefiles and preparing stack of predictors
   variable.list<-c("prec","tmin","tmax")
  initial.months<-c("1","2","3","4","5","6","7","8","9","10","11","12")
  final.months<-c("01","02","03","04","05","06","07","08","09","10","11","12")
  selected.shape.mountain<-shape.mountain[shape.mountain$Name %in% names.mountain,] #subsets the polygons with species occurrences
    unzip("tmax01.zip") #original download names of CHELSA variables should be replaced
    message(paste("masking tmax01 for",i,sep=" "),appendLF=T)
    tmax01<-mask(crop(raster("CHELSA_tmax_1_1979-2013_land.tif",crs=geoproj),selected.shape.mountain),selected.shape.mountain)
    file.remove("CHELSA_tmax_1_1979-2013_land.tif")
    
    unzip("tmax02.zip") #original download names of CHELSA variables should be replaced
    message(paste("masking tmax01 for",i,sep=" "),appendLF=T)
    tmax02<-mask(crop(raster("CHELSA_tmax_2_1979-2013_land.tif",crs=geoproj),selected.shape.mountain),selected.shape.mountain)
    file.remove("CHELSA_tmax_2_1979-2013_land.tif")
    
    unzip("tmax03.zip") #original download names of CHELSA variables should be replaced
    message(paste("masking tmax03 for",i,sep=" "),appendLF=T)
    tmax03<-mask(crop(raster("CHELSA_tmax_3_1979-2013_land.tif",crs=geoproj),selected.shape.mountain),selected.shape.mountain)
    file.remove("CHELSA_tmax_3_1979-2013_land.tif")
    
    unzip("tmax04.zip") #original download names of CHELSA variables should be replaced
    message(paste("masking tmax04 for",i,sep=" "),appendLF=T)
    tmax04<-mask(crop(raster("CHELSA_tmax_4_1979-2013_land.tif",crs=geoproj),selected.shape.mountain),selected.shape.mountain)
    file.remove("CHELSA_tmax_4_1979-2013_land.tif")
    #etc.
    setwd(paste("xx",m,r,y,sep="")) #XX to define the folder path
    unzip("anomalies.zip")
    
    ### etc.
    biov<-biovars(tmax,tmin,prec)
    #now, we subset the ones to be used
    }
    }
    }
    } #close all the loop
    
    
  
 
